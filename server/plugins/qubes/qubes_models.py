#!/usr/bin/env -S uv run --script

# Source: https://api.ies.ed.gov/eric?search=python
# Docs: https://eric.ed.gov/?api#/default/get_eric_

# /// script
# requires-python = ">=3.13"
# dependencies = [
#     "pydantic",
# ]
# ///
#
# Generated with command:
# uv tool run --from=datamodel-code-generator datamodel-codegen \
#             --input qubes_records.json --input-file-type json \
#             --output qubes_models.py

# generated by datamodel-codegen:
#   filename:  qubes_records.json
#   timestamp: 2025-05-19T05:38:58+00:00

from __future__ import annotations

from pydantic import BaseModel, RootModel


class ModelItem(BaseModel):
    identifier: str | None = None
    setSpec: str  # noqa: N815
    title: str
    creator: str | list[str]
    subject: str | list[str]
    date: str
    description: str
    type: str
    rights: str | None = None
    relation: str | list[str] | None = None


class Model(RootModel[list[ModelItem]]):
    pass


if __name__ == "__main__":
    from pathlib import Path

    here = Path(__file__).parent
    # A qubes_records.json file should contain multiple items.
    if not (json_path := here / "qubes_records.json").exists():
        msg = f"See convert_qubes_xml_to_json.py to regenerate {json_path.name}."
        raise FileNotFoundError(msg)

    records = Model.model_validate_json(json_path.read_text()).root
    for i, record in enumerate(records, start=1):
        # print(f"{record = }\n")
        print(f"\n{i:>2}. {record.identifier = }")
        print(f"{record.title = }")
        print(f"{record.creator = }")
        print(f"{record.description = }")
        print(f"{record.subject = }")
