#!/usr/bin/env -S uv run --script

# Source: https://api.ies.ed.gov/eric?search=python
# Docs: https://eric.ed.gov/?api#/default/get_eric_

# /// script
# requires-python = ">=3.13"
# dependencies = [
#     "httpx",
#     "pydantic",
# ]
# ///
#
# generated by datamodel-codegen:
#   filename:  oercommons.json
#   timestamp: 2025-03-19T13:28:15+00:00
#
# Generated with command:
# uv tool run --from=datamodel-code-generator datamodel-codegen \
#             --input eric_item.json --input-file-type json \
#             --output eric_item_models.py

from collections.abc import Iterator

from server.plugins.eric.plugin import EricPlugin
from server.plugins.ome_plugin import EducationResource

plugin = EricPlugin()
# URL = "https://api.ies.ed.gov/eric?search=title:python&rows=200"
URL = "https://api.ies.ed.gov/eric?search=python&rows=50"  # numFound: 343


def bulk_translate(docs: list[dict]) -> Iterator[EducationResource]:
    yield from (plugin.make_metadata_card_from_dict(doc) for doc in docs)


def bulk_translate_to_json(docs: list[dict]) -> str:
    """
    Translate a iterable of EducationResource into a JSON list string.
    """
    docs_as_json = (doc.model_dump_json(indent=2) for doc in bulk_translate(docs))
    return f"[\n{',\n'.join(docs_as_json)}\n]"


def bulk_import(url: str = URL) -> str:
    """
    Created OME metadata records as NNTP articles from the given URL.

    Each article body should contain a title, URL, and date visited.
    Each article should have two enclosures:
    - The original json downloaded.
    - OME metadata as translated by this OME plugin
    """
    import json
    from pathlib import Path

    from httpx import Client

    # The eric_bulk.json file should be in the same directory as this script.
    here = Path(__file__).resolve().parent
    if not (json_path := here / "eric_bulk.json").exists():
        with Client() as httpx_client:
            response = httpx_client.get(url).raise_for_status()
            json_path.write_text(response.text)

    # The eric_ome_metadata.json file should be in the same directory as this script.
    if not (json_ome_metedata_path := here / "eric_ome_metadata.json").exists():
        docs = json.loads(json_path.read_text())["response"]["docs"]
        # temp = "\n".join(bulk_translate_to_json(docs))
        # json_ome_metedata_path.write_text(f"[\n{temp}\n]")
        json_ome_metedata_path.write_text(bulk_translate_to_json(docs))

    return json.loads(json_ome_metedata_path.read_text())


if __name__ == "__main__":
    print(f"{bulk_import() = }")
