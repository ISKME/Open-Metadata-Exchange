#!/usr/bin/env -S uv run --script

# Source: https://api.ies.ed.gov/eric?search=python
# Docs: https://eric.ed.gov/?api#/default/get_eric_

# /// script
# requires-python = ">=3.13"
# dependencies = [
#     "httpx",
#     "pydantic",
# ]
# ///
#
# Generated with command:
# uv tool run --from=datamodel-code-generator datamodel-codegen \
#             --input eric.json --input-file-type json \
#             --output eric_models.py \
# && ruff check --select=UP006,UP007 --fix
#
# # generated by datamodel-codegen:
#   filename:  eric.json
#   timestamp: 2025-04-29T07:21:06+00:00

# ruff: noqa: N815 -- mixed-case-variable-in-class-scope

from __future__ import annotations

from pydantic import BaseModel


class Doc(BaseModel):
    id: str
    title: str
    author: list[str]
    description: str
    subject: list[str]
    publicationtype: list[str]
    publicationdateyear: int
    language: list[str] | None = None
    issn: list[str] | None = None
    publisher: str | None = None
    peerreviewed: str


class Response(BaseModel):
    numFound: int
    start: int
    numFoundExact: bool
    docs: list[Doc]


class Model(BaseModel):
    response: Response


if __name__ == "__main__":
    import json
    from pathlib import Path

    from httpx import Client

    here = Path(__file__).resolve().parent
    # Conditionally create an eric.json file that should contain multiple items (docs).
    if not (json_path := here / "eric.json").exists():
        with Client() as httpx_client:
            url = "https://api.ies.ed.gov/eric?search=python"
            response = httpx_client.get(url).raise_for_status()
            json_path.write_text(response.text)
    # Conditionally create an eric_item.json file that should contain only one item.
    if not (json_item_path := here / "eric_item.json").exists():
        json_payload = json.loads(json_path.read_text())["response"]["docs"][0]
        json_item_path.write_text(json.dumps(json_payload, indent=2))

    # The eric_item.json file should be in the same directory as this script.
    doc_instance = Doc.model_validate_json(json_item_path.read_text())
    print(f"{doc_instance = }\n")
    print(f"{doc_instance.title = }")
    print(f"{doc_instance.author = }")
    print(f"{doc_instance.description = }")
    print(f"{doc_instance.subject = }")
