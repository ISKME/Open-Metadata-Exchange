#!/usr/bin/env -S uv run --script

# Source: https://api.ies.ed.gov/eric?search=python
# Docs: https://eric.ed.gov/?api#/default/get_eric_

# /// script
# requires-python = ">=3.13"
# dependencies = [
#     "httpx",
#     "pydantic",
# ]
# ///
#
# generated by datamodel-codegen:
#   filename:  oercommons.json
#   timestamp: 2025-03-19T13:28:15+00:00
#
# Generated with command:
# uv tool run --from=datamodel-code-generator datamodel-codegen \
#             --input eric_item.json --input-file-type json \
#             --output eric_item_models.py

from __future__ import annotations

from pydantic import BaseModel


class Model(BaseModel):
    id: str
    title: str
    author: list[str]
    description: str
    subject: list[str]
    publicationtype: list[str]
    publicationdateyear: int
    language: list[str]
    issn: list[str]
    publisher: str
    peerreviewed: str


if __name__ == "__main__":
    import json
    from pathlib import Path

    from httpx import Client

    here = Path(__file__).resolve().parent
    # Conditionally create an eric.json file that should contain up to 20 items.
    if not (json_path := here / "eric.json").exists():
        with Client() as client:
            response = client.get("https://api.ies.ed.gov/eric?search=python")
            response.raise_for_status()
            json_path.write_text(response.text)
    # Conditionally create an eric_item.json file that should contain only one item.
    if not (json_item_path := here / "eric_item.json").exists():
        json_payload = json.loads(json_path.read_text())["response"]["docs"][0]
        json_item_path.write_text(json.dumps(json_payload, indent=2))

    # The eric_item.json file should be in the same directory as this script.
    model_instance = Model.model_validate_json(json_item_path.read_text())
    print(f"{model_instance = }\n")
    print(f"{model_instance.title = }")
    print(f"{model_instance.author = }")
    print(f"{model_instance.description = }")
    print(f"{model_instance.subject = }")
